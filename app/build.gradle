apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: "net.ltgt.errorprone"
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libs


android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('../keystore/keys.json')
        }
    }

    defaultConfig {

        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name

        Properties props = new Properties()
        props.load(new FileInputStream('./keystore/meetup.properties'))

        resConfig "en"
        buildConfigField "String", "PLAYSTORE_LINK", "\"${props.playstore_link}\""
        buildConfigField "String", "GITHUB_LINK", "\"${props.github_link}\""
        buildConfigField "String", "BUILD_DATE", "\"${cfg.buildTime}\""
        buildConfigField "String", "GIT_SHA", "\"${cfg.gitSha}\""
        buildConfigField "String", "MEETUP_OAUTH_KEY", "\"${props.meetup_oauth_key}\""
        buildConfigField "String", "MEETUP_OAUTH_SECRET", "\"${props.meetup_oauth_secret}\""
        buildConfigField "String", "MEETUP_OAUTH_REDIRECT_URI", "\"${props.meetup_oauth_redirect_uri}\""

        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    if (cfg.hasKeyfile) {
        Properties keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream('./keystore/keystore.properties'))
        signingConfigs {
            release {
                keyAlias keystoreProperties.keyAlias
                keyPassword keystoreProperties.keyPassword
                storeFile file(keystoreProperties.storeFile)
                storePassword keystoreProperties.storePassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug (Build: ${cfg.gitSha})"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (cfg.hasKeyfile)
                signingConfig signingConfigs.release
            else
                signingConfig android.signingConfigs.debug
        }
    }

    buildTypes.all { buildType ->

        def actionScheme = "msync"
        def actionName = cfg.package + buildType.name + ".PREF_ACTION"

        buildType.resValue "string", "pref_action", actionName
        buildType.manifestPlaceholders = [actionName: actionName, actionScheme: actionScheme]

        def addConstant = { key, value ->
            buildType.resValue "string", key, "$value"
            buildType.buildConfigField "String", key.toUpperCase(), "\"$value\""
        }

        addConstant("pref_action_sync_now", actionScheme + "://SYNC_NOW")
        addConstant("pref_action_share", actionScheme + "://SHARE")
        addConstant("pref_action_logout", actionScheme + "://LOGOUT")
        addConstant("pref_action_github", actionScheme + "://GITHUB")

        addConstant("account_type", cfg.package + buildType.applicationIdSuffix)
        addConstant("auth_token_type", cfg.package + buildType.applicationIdSuffix)
    }

    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'NOTICE.txt'
        exclude 'NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'

        exclude 'kotlin/**'
        exclude 'META-INF/*.kotlin_module'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    dexOptions {
        dexInProcess true
        maxProcessCount 4
        javaMaxHeapSize "3g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

play {
    track = 'alpha' // 'production' or 'rollout' or 'beta' or 'alpha'
//    userFraction = 1.0 // only necessary for 'rollout', in this case default is 0.1 (10% of the target)
    untrackOld = true // will untrack 'alpha' while upload to 'beta'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.android.support') {
            details.useVersion "${libs.support}"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // support
    implementation "com.android.support:customtabs:${libs.support}"

    // firebase
    implementation("com.firebase:firebase-jobdispatcher:${libs.firebase_jobdispatcher}") {
        transitive = false
    }

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${libs.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.kotlin_coroutines}"

    // anko
    implementation "org.jetbrains.anko:anko-sdk15:${libs.anko}"
    // sdk19, sdk21, sdk23 are also available

    // timber
    implementation "com.jakewharton.timber:timber:${libs.timber}"

    // stetho
    debugImplementation "com.facebook.stetho:stetho:${libs.stetho}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${libs.stetho}"

    // rx
    implementation "io.reactivex.rxjava2:rxjava:${libs.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${libs.retrofit}"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${libs.retrofit_rxjava2_adapter}"
    implementation "com.squareup.okhttp3:okhttp:${libs.okhttp}"
    debugImplementation "com.squareup.okhttp3:logging-interceptor:${libs.okhttp}"

    // leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"

    // dagger2
    implementation "com.google.dagger:dagger:${libs.dagger2}"
    kapt "com.google.dagger:dagger-compiler:${libs.dagger2}"

    // ColorPickerPreference
    implementation("com.github.kizitonwose.colorpreference:core:${libs.colorpicker}") {
        transitive = false
    }
}


task release

task archiveRelease(type: Copy) {
    from './build/outputs/'
    into "../releases/${rootProject.ext.configuration.version_code}"
    include('apk/release/app-release.apk', 'mapping/release/mapping.txt')
    rename('app-release.apk', "${rootProject.ext.configuration.package}_${rootProject.ext.configuration.version_name}_${rootProject.ext.configuration.version_code}.apk")
}

project.afterEvaluate {

    dependencyUpdates.dependsOn clean
    assembleRelease.dependsOn clean

    def publishApkRelease = project.tasks.getByName("publishApkRelease")
    publishApkRelease.dependsOn assembleRelease

    firebaseUploadReleaseProguardMapping.shouldRunAfter assembleRelease
    archiveRelease.shouldRunAfter assembleRelease

    release.dependsOn publishApkRelease, archiveRelease
}

// ADD THIS AT THE BOTTOM
//apply plugin: 'com.google.gms.google-services'
